#!/usr/bin/env python2.2
# -*- Mode: python -*-

#    Copyright (C) 2001 Artifex Software Inc.
# 
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License version 2
#  as published by the Free Software Foundation.
#
#
#  This software is provided AS-IS with no warranty, either express or
#  implied. That is, this program is distributed in the hope that it will 
#  be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  General Public License for more details
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write to the Free Software Foundation, Inc.,
#  59 Temple Place, Suite 330, Boston, MA, 02111-1307.
# 
# For more information about licensing, please refer to
# http://www.ghostscript.com/licensing/. For information on
# commercial licensing, go to http://www.artifex.com/licensing/ or
# contact Artifex Software, Inc., 101 Lucas Valley Road #110,
# San Rafael, CA  94903, U.S.A., +1(415)492-9861.

# $Id: make_two_versions,v 1.1 2004/02/14 23:13:10 atai Exp $

#
# make_two_versions <filename> [<device> [<res> [<banding>]]]
#
# this script creates two versions of the file specified
# one from baseline, and one from head
# these are appropriate for a visual diff

import gstestgs
import gsconf
import rasterdb
import os, sys
import string

file = os.path.basename(sys.argv[1])
if len(sys.argv) > 2:
    device = sys.argv[2]
else:
    device = 'ppmraw'
if len(sys.argv) > 3:
    res = int(sys.argv[3])
else:
    res = 72
if len(sys.argv) > 4:
    banding = int(sys.argv[4])
else:
    banding = 0

dbfile = "%s.%s.%d.%d" % (file, device, res, 0)
ofile = "%s.%s.baseline.pnm" % (file, device)

# check if raster for this baseline is in the database, and if so, use
# it instead of generating approximate raster via baselinegs
if rasterdb.exists(dbfile):
    rasterdb.get_file(dbfile, output=ofile)
else:
    gs = gstestgs.Ghostscript()
    gs.command = gsconf.baselinegs
    gs.infile = gsconf.comparefiledir + file
    gs.outfile = ofile
    gs.device = device
    gs.dpi = res
    gs.band = banding
    gs.log_stdout = gsconf.log_stdout
    gs.log_stderr = gsconf.log_stderr

    if not gs.process():
        print "Error occurred running baseline Ghostscript."
        sys.exit(1)

ofile = "%s.%s.compare.pnm" % (file, device)

gs = gstestgs.Ghostscript()
gs.command = gsconf.comparegs
gs.infile = gsconf.comparefiledir + file
gs.outfile = ofile
gs.device = device
gs.dpi = res
gs.band = banding
gs.log_stdout = gsconf.log_stdout
gs.log_stderr = gsconf.log_stderr

if not gs.process():
    print "Error occurred running compare Ghostscript."
    sys.exit(1)
